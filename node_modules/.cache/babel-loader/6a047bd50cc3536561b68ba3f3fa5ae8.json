{"ast":null,"code":"var _jsxFileName = \"/Users/macbookair/Desktop/DMF_SITE/light-of-islam-client/src/Pages/Payment/CheckoutForm.js\",\n    _s = $RefreshSig$();\n\nimport { CardElement, useElements, useStripe } from \"@stripe/react-stripe-js\";\nimport { Spin } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport useAuth from \"../../hooks/useAuth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CheckoutForm = ({\n  price\n}) => {\n  _s();\n\n  const stripe = useStripe();\n  const elements = useElements();\n  const {\n    user\n  } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [process, setProcess] = useState(false);\n  const [clientSecret, setClientSecret] = useState(\"\");\n  console.log(price);\n  useEffect(() => {\n    fetch(\"https://dmf-server.vercel.app/create-payment-intent\", {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        price\n      })\n    }).then(res => res.json()).then(data => setClientSecret(data.clientSecret)).catch(error => {\n      console.log(error);\n    });\n  }, [price]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    } // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n\n\n    const card = elements.getElement(CardElement);\n\n    if (card === null) {\n      return;\n    } // Use your card Element with other Stripe.js APIs\n\n\n    setProcess(true);\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: \"card\",\n      card\n    });\n\n    if (error) {\n      setError(error.message);\n      setSuccess(\"\");\n    } else {\n      setError(\"\");\n      console.log(paymentMethod);\n    } // payment intent\n\n\n    const {\n      paymentIntent,\n      error: intentError\n    } = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: card,\n        billing_details: {\n          name: user === null || user === void 0 ? void 0 : user.displayName,\n          email: user === null || user === void 0 ? void 0 : user.email\n        }\n      }\n    });\n\n    if (intentError) {\n      setError(intentError.message);\n      setSuccess(\"\");\n    } else {\n      setError(\"\");\n      setSuccess(\"Your payment processed successfully!\");\n      console.log(paymentIntent);\n      setProcess(false); // save to database\n\n      const payment = {\n        name: user === null || user === void 0 ? void 0 : user.displayName,\n        email: user === null || user === void 0 ? void 0 : user.email,\n        amount: paymentIntent.amount,\n        created: paymentIntent.created,\n        transaction: paymentIntent.client_secret.slice(\"_secret\")[0],\n        lastFourDigit: paymentMethod.card.last4\n      };\n      fetch(\"https://dmf-server.vercel.app/paymentInfo\", {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        body: JSON.stringify(payment)\n      }).then(res => res.json()).then(data => {\n        window.location.replace(\"dashboard/mypaymentInfo\");\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"mx-96\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(CardElement, {\n        options: {\n          style: {\n            base: {\n              fontSize: \"16px\",\n              color: \"#424770\",\n              \"::placeholder\": {\n                color: \"#aab7c4\"\n              }\n            },\n            invalid: {\n              color: \"#9e2146\"\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), process ? /*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"service-btn\",\n        type: \"submit\",\n        disabled: !stripe,\n        children: [\"Pay $\", price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }, this), success && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"green\"\n      },\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CheckoutForm, \"06VxFefzqqsmI2lEUVPMPVxlPK0=\", false, function () {\n  return [useStripe, useElements, useAuth];\n});\n\n_c = CheckoutForm;\nexport default CheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["/Users/macbookair/Desktop/DMF_SITE/light-of-islam-client/src/Pages/Payment/CheckoutForm.js"],"names":["CardElement","useElements","useStripe","Spin","React","useEffect","useState","useAuth","CheckoutForm","price","stripe","elements","user","error","setError","success","setSuccess","process","setProcess","clientSecret","setClientSecret","console","log","fetch","method","headers","body","JSON","stringify","then","res","json","data","catch","handleSubmit","e","preventDefault","card","getElement","paymentMethod","createPaymentMethod","type","message","paymentIntent","intentError","confirmCardPayment","payment_method","billing_details","name","displayName","email","payment","amount","created","transaction","client_secret","slice","lastFourDigit","last4","window","location","replace","style","base","fontSize","color","invalid"],"mappings":"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","sourcesContent":["import { CardElement, useElements, useStripe } from \"@stripe/react-stripe-js\";\nimport { Spin } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport useAuth from \"../../hooks/useAuth\";\n\nconst CheckoutForm = ({ price }) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { user } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [process, setProcess] = useState(false);\n\n  const [clientSecret, setClientSecret] = useState(\"\");\n  console.log(price);\n\n  useEffect(() => {\n    fetch(\"https://dmf-server.vercel.app/create-payment-intent\", {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n      body: JSON.stringify({ price }),\n    })\n      .then((res) => res.json())\n      .then((data) => setClientSecret(data.clientSecret))\n      .catch((error) => {\n        console.log(error);\n      });\n  }, [price]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n    // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n    const card = elements.getElement(CardElement);\n\n    if (card === null) {\n      return;\n    }\n\n    // Use your card Element with other Stripe.js APIs\n    setProcess(true);\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\n      type: \"card\",\n      card,\n    });\n\n    if (error) {\n      setError(error.message);\n      setSuccess(\"\");\n    } else {\n      setError(\"\");\n      console.log(paymentMethod);\n    }\n    // payment intent\n    const { paymentIntent, error: intentError } =\n      await stripe.confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: card,\n          billing_details: {\n            name: user?.displayName,\n            email: user?.email,\n          },\n        },\n      });\n    if (intentError) {\n      setError(intentError.message);\n      setSuccess(\"\");\n    } else {\n      setError(\"\");\n      setSuccess(\"Your payment processed successfully!\");\n      console.log(paymentIntent);\n      setProcess(false);\n      // save to database\n\n      const payment = {\n        name: user?.displayName,\n        email: user?.email,\n        amount: paymentIntent.amount,\n        created: paymentIntent.created,\n        transaction: paymentIntent.client_secret.slice(\"_secret\")[0],\n        lastFourDigit: paymentMethod.card.last4,\n      };\n      fetch(\"https://dmf-server.vercel.app/paymentInfo\", {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\",\n        },\n        body: JSON.stringify(payment),\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          window.location.replace(\"dashboard/mypaymentInfo\");\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  };\n  return (\n    <div>\n      <form className=\"mx-96\" onSubmit={handleSubmit}>\n        <CardElement\n          options={{\n            style: {\n              base: {\n                fontSize: \"16px\",\n                color: \"#424770\",\n                \"::placeholder\": {\n                  color: \"#aab7c4\",\n                },\n              },\n              invalid: {\n                color: \"#9e2146\",\n              },\n            },\n          }}\n        />\n        {process ? (\n          <Spin></Spin>\n        ) : (\n          <button className=\"service-btn\" type=\"submit\" disabled={!stripe}>\n            Pay ${price}\n          </button>\n        )}\n      </form>\n\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n      {success && <p style={{ color: \"green\" }}>{success}</p>}\n    </div>\n  );\n};\n\nexport default CheckoutForm;\n"]},"metadata":{},"sourceType":"module"}